bartlett.test(data = ., value ~ treatment) %>% .[["p.value"]]
data.tidy %>% filter(., treatment %in% c("x.ci", "y.ci")) %>%
bartlett.test(data = ., value ~ treatment) %>% .[["p.value"]]
# Check for unequal variances by district
data.tidy %>% filter(., District == "Bardiya" & treatment %in% c("x.kg", "y.kg")) %>%
bartlett.test(data = ., value ~ treatment) %>% .[["p.value"]]
# Generate summaries using data.tidy ----
summ.by.all <- data.tidy %>%
group_by(treatment) %>%
summarize(
nobs = length(value),
min = min(value),
max = max(value),
average = mean(value),
sd = sd(value),
median = median(value),
var = var(value)
)
summ.by.dist <- data.tidy %>%
group_by(District, treatment) %>%
summarize(
nobs = length(value),
min = min(value),
max = max(value),
average = mean(value),
sd = sd(value),
median = median(value),
var = var(value)
)
summ.by.site <- data.tidy %>%
group_by(District, Site, treatment) %>%
summarize(
nobs = length(value),
min = min(value),
max = max(value),
average = mean(value),
sd = sd(value),
median = median(value),
var = var(value)
)
write_csv(summ.by.all,  "summbyall.csv")
write_csv(summ.by.dist, "summbydist.csv")
write_csv(summ.by.site, "summbysite.csv")
View(summ.by.all)
# Plots ----
# Crop intensity
scale_max <- max(x.ci, y.ci, na.rm = TRUE) + 1
p.ci <- plot.data %>%
ggplot(aes(x = x.ci, y = y.ci, shape = District, color = Site)) +
geom_abline(intercept = 0, slope = 1) +
xlim(0, scale_max) + ylim(0, scale_max) +
geom_point(size = 8, alpha = 1) +
geom_text(aes(label = SN)) +
scale_shape_manual(values = c(1, 0, 2)) +
facet_grid(. ~ District) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(title = "A. Cropping intensity",
x = "Before",
y = "After")
p.ci
# Production
scale_max <- max(x.kg, y.kg, na.rm = TRUE)/1000 + 1
p.kg <- plot.data %>%
ggplot(aes(x = x.kg/1000, y = y.kg/1000, shape = District, color = Site)) +
geom_abline(intercept = 0, slope = 1) +
xlim(0, scale_max) + ylim(0, scale_max) +
geom_point(size = 8, alpha = 1) +
geom_text(aes(label = SN)) +
scale_shape_manual(values = c(1, 0, 2)) +
facet_grid(. ~ District) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(title = "B. Production in tons",
x = "Before",
y = "After")
p.kg
# Crop diversity
scale_max <- max(x.crop, y.crop, na.rm = TRUE) + 1
p.crop <- plot.data %>%
ggplot(aes(x = x.crop, y = y.crop, shape = District, color = Site)) +
geom_abline(intercept = 0, slope = 1) +
xlim(0, scale_max) + ylim(0, scale_max) +
geom_point(size = 8, alpha = 1) +
geom_text(aes(label = SN)) +
scale_shape_manual(values = c(1, 0, 2)) +
facet_grid(. ~ District) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(title = "C. Crops per household",
x = "Before",
y = "After")
p.crop
# Change in Production Area
scale_max <- max(x.area, y.area, na.rm = TRUE) + 1
p.area <- plot.data %>%
ggplot(aes(x = x.area, y = y.area, shape = District, color = Site)) +
geom_abline(intercept = 0, slope = 1) +
xlim(0, scale_max) + ylim(0, scale_max) +
geom_point(size = 8, alpha = 1) +
geom_text(aes(label = SN)) +
scale_shape_manual(values = c(1, 0, 2)) +
facet_grid(. ~ District) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(title = "D. Production area per household",
x = "Before",
y = "After")
p.area
# Income
scale_max <- max(x.income, y.income, na.rm = TRUE) + 1
p.inc <- plot.data %>%
ggplot(aes(x = x.income, y = y.income, shape = District, color = Site)) +
geom_abline(intercept = 0, slope = 1) +
xlim(0, scale_max) + ylim(0, scale_max) +
geom_point(size = 8, alpha = 1) +
geom_text(aes(label = SN)) +
scale_shape_manual(values = c(1, 0, 2)) +
facet_grid(. ~ District) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(title = "E. Income per household",
x = "Before",
y = "After")
p.inc
library(cowplot)
prow <- plot_grid(p.ci + theme(legend.position = "none"),
p.kg + theme(legend.position = "none"),
p.crop + theme(legend.position = "none"),
p.area + theme(legend.position = "none"),
p.inc + theme(legend.position = "none"),
ncol = 2)
# Extract and add a common legend
p.legend <- get_legend(p.ci + theme(legend.box.margin = margin(0, 0, 0, 12)))
prow.legend <- plot_grid(prow, p.legend, rel_widths = c(3, 0.4))
prow.legend
ggdraw(add_sub(prow.legend,
"plots created using simulated data for illustration",
size = 10,
hjust = 0.5))
ggsave(paste0("ScatterPlots_faceted", Sys.Date(), ".png"), plot = last_plot(), width = 12, height = 18, units = "in", dpi = 300, device = "png")
plot.data[1:4] %>%
pivot_longer(cols = c(-District, -Site),
names_to = "Treatment",
values_to = "Value") %>%
ggplot(aes(x = District, y = Value)) +
geom_violin(aes(color = Treatment), alpha = 0.5, trim = FALSE) +
geom_boxplot(aes(color = Treatment), alpha = 0.5) +
theme_bw()
plot.data[1:4]
plot.data[1:4] %>%
pivot_longer(cols = c(-District, -Site),
names_to = "Treatment",
values_to = "Value")
plot.data[1:4] %>%
pivot_longer(cols = c(-District, -Site),
names_to = "Treatment",
values_to = "Value")
?pivot_longer
View(plot.data)
#sinaplot
library(ggforce)
plot.data[1:4] %>%
pivot_longer(cols = c(-District, -Site),
names_to = "Treatment",
values_to = "Value") %>%
ggplot(aes(x = District, y = Value)) +
geom_sina(aes(color = Treatment)) +
geom_boxplot(aes(color = Treatment), alpha = 0) +
theme_bw()
plot.data %>% pivot_longer(cols = c(-District, -Site), names_to = "Treatment", values_to = "Value")
plot.data %>% pivot_longer(cols = c(District, Site), names_to = "Treatment", values_to = "Value")
plot.data %>% # I don't know why I had only cols 1:4 before
pivot_longer(cols = c(-District, -Site),
names_to = "Treatment",
values_to = "Value") %>%
ggplot(aes(x = District, y = Value)) +
geom_violin(aes(color = Treatment), alpha = 0.5, trim = FALSE) +
geom_boxplot(aes(color = Treatment), alpha = 0.5) +
theme_bw()
plot.data %>% # I don't know why I had only cols 1:4 before
pivot_longer(cols = c(District, Site),
names_to = "Treatment",
values_to = "Value") %>%
ggplot(aes(x = District, y = Value)) +
geom_violin(aes(color = Treatment), alpha = 0.5, trim = FALSE) +
geom_boxplot(aes(color = Treatment), alpha = 0.5) +
theme_bw()
plot.data %>%
pivot_longer(cols = c(-District, -Site),
names_to = "Treatment",
values_to = "Value") %>%
ggplot(aes(x = District, y = Value)) +
geom_sina(aes(color = Treatment)) +
geom_boxplot(aes(color = Treatment), alpha = 0) +
theme_bw()
plot.data %>%
pivot_longer(cols = c(District, Site),
names_to = "Treatment",
values_to = "Value") %>%
ggplot(aes(x = District, y = Value)) +
geom_sina(aes(color = Treatment)) +
geom_boxplot(aes(color = Treatment), alpha = 0) +
theme_bw()
# Traditional plots ----
library(ggpubr)
# Cropping Intensity
bpd <- plot.data[c("District", "x.ci", "y.ci")]
names(bpd) <- c("District", "before", "after")
bp.ci <- ggpaired(bpd, cond1 = "before", cond2 = "after",
facet.by = "District",
line.color = "gray",
title = "A. Change in cropping intensity",
xlab = "",
ylab = "Cropping intensity") +
stat_compare_means(method = "wilcox.test" ,
paired = TRUE,
label.y.npc = .9,
aes(label = paste("P =", ..p.format..) ) )
bp.ci
# Production
bpd <- plot.data[c("District", "x.kg", "y.kg")]
names(bpd) <- c("District", "before", "after")
bp.kg <- ggpaired(bpd, cond1 = "before", cond2 = "after",
facet.by = "District",
line.color = "gray",
title = "B. Change in production",
xlab = "",
ylab = "Kg") +
stat_compare_means(method = "wilcox.test" ,
paired = TRUE,
label.y.npc = .9,
aes(label = paste("P =", ..p.format..) ) )
bp.kg
# Change in number of crops
bpd <- plot.data[c("District", "x.crop", "y.crop")]
names(bpd) <- c("District", "before", "after")
bp.crop <- ggpaired(bpd, cond1 = "before", cond2 = "after",
facet.by = "District",
line.color = "gray",
title = "C. Change in crops per household",
xlab = "",
ylab = "Crops per HH") +
stat_compare_means(method = "wilcox.test" ,
paired = TRUE,
label.y.npc = .9,
aes(label = paste("P =", ..p.format..) ) )
bp.crop
# Change in area of production
bpd <- plot.data[c("District", "x.area", "y.area")]
names(bpd) <- c("District", "before", "after")
bp.area <- ggpaired(bpd, cond1 = "before", cond2 = "after",
facet.by = "District",
line.color = "gray",
title = "D. Change in production area per household",
xlab = "",
ylab = "Ropani per HH") +
stat_compare_means(method = "wilcox.test" ,
paired = TRUE,
label.y.npc = .9,
aes(label = paste("P =", ..p.format..) ) )
bp.area
# Change in income
bpd <- plot.data[c("District", "x.income", "y.income")]
names(bpd) <- c("District", "before", "after")
bp.income <- ggpaired(bpd, cond1 = "before", cond2 = "after",
facet.by = "District",
line.color = "gray",
title = "E. Change in income per household",
xlab = "",
ylab = "Income from agriculture (NPR)") +
stat_compare_means(method = "wilcox.test" ,
paired = TRUE,
label.y.npc = .9,
aes(label = paste("P =", ..p.format..) ) )
bp.income
library(cowplot)
bp.row <- plot_grid(bp.ci, bp.kg, bp.crop, bp.area, bp.income,
ncol = 5,
nrow = 1)
bp.row
bp.row <- plot_grid(bp.ci, bp.kg, bp.crop, bp.area, bp.income,
ncol = 2,
nrow = 2)
bp.row
bp.row <- plot_grid(bp.ci, bp.kg, bp.crop, bp.area, bp.income,
ncol = 2,
nrow = 3)
bp.row
bp.row <- plot_grid(bp.ci, bp.kg, bp.crop, bp.area, bp.income,
ncol = 3,
nrow = 2)
bp.row
ggsave(paste0("ComparisonPlots", Sys.Date(), ".png"), plot = last_plot(), width = 12, height = 18, units = "in", dpi = 300, device = "png")
ggsave(paste0("ComparisonPlots", Sys.Date(), ".png"), plot = last_plot(), width = 13, height = 16, units = "in", dpi = 300, device = "png")
bp.row <- plot_grid(bp.ci, bp.kg, bp.crop, bp.area, bp.income,
ncol = 2,
nrow = 3)
bp.row
ggsave(paste0("ComparisonPlots", Sys.Date(), ".png"), plot = last_plot(), width = 13, height = 16, units = "in", dpi = 300, device = "png")
# Change in income
bpd <- plot.data[c("District", "x.income", "y.income")]
names(bpd) <- c("District", "before", "after")
install.packages("scales")
install.packages("scales")
# Change in income
library(scales)
bpd <- plot.data[c("District", "x.income", "y.income")]
names(bpd) <- c("District", "before", "after")
bp.income <- ggpaired(bpd, cond1 = "before", cond2 = "after",
facet.by = "District",
line.color = "gray",
title = "E. Change in income per household",
xlab = "",
ylab = "Income from agriculture (NPR)") +
+ scale_y_continuous(labels = label_number(suffix = "K", scale = 1e3)) +
stat_compare_means(method = "wilcox.test" ,
paired = TRUE,
label.y.npc = .9,
aes(label = paste("P =", ..p.format..) ) )
# Change in income
library(scales)
bp.income <- ggpaired(bpd, cond1 = "before", cond2 = "after",
facet.by = "District",
line.color = "gray",
title = "E. Change in income per household",
xlab = "",
ylab = "Income from agriculture (NPR)") +
stat_compare_means(method = "wilcox.test" ,
paired = TRUE,
label.y.npc = .9,
aes(label = paste("P =", ..p.format..) ) )
bp.income
library(tidyverse)
library(cowplot)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cowplot)
library()
plot.data <- read_csv("solar-irrigation-data.csv")
attach(plot.data)
# Test for normality using Shapiro Wilk test
# If P > 0.05, we cannot reject the NULL hypothesis that the distribution is different than normal
# If P < 0.05, then the distribution is significantly different than normal
for(i in 6:16){
print(names(plot.data[i]))
print(shapiro.test(plot.data[[i]]))
}
# Results: only cropping intensity can be assumed to be normal (P = 0.15).
# normality test by district
df <- filter(plot.data, District == "Nawalpur")
for(i in 6:16){
print(names(df[i]))
print(shapiro.test(df[[i]]))
}
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(rlang)
for(i in 6:16){print(names(df[i]))  print(shapiro.test(df[[i]])) }
for(i in 6:16){print(names(df[i]))
print(shapiro.test(df[[i]])) }
library(tidyverse)
# Analysis with actual data ----
#Test for normality and homogeneity of variance
plot.data <- read_csv("solar-irrigation-data.csv")
attach(plot.data)
# Test for normality using Shapiro Wilk test
# If P > 0.05, we cannot reject the NULL hypothesis that the distribution is different than normal
# If P < 0.05, then the distribution is significantly different than normal
for(i in 6:16){
print(names(plot.data[i]))
print(shapiro.test(plot.data[[i]]))
}
# Results: only cropping intensity can be assumed to be normal (P = 0.15).
# normality test by district
df <- filter(plot.data, District == "Nawalpur")
for(i in 6:16){print(names(df[i]))  print(shapiro.test(df[[i]])) }
# Results: only cropping intensity can be assumed to be normal (P = 0.15).
# normality test by district
df <- filter(plot.data, District == "Nawalpur")
# Analysis with actual data ----
#Test for normality and homogeneity of variance
plot.data <- read_csv("solar-irrigation-data.csv")
library(tidyverse)
library(tidyverse)
library(rlang)
install.packages("rlang")
library(tidyverse)
# Analysis with actual data ----
#Test for normality and homogeneity of variance
plot.data <- read_csv("solar-irrigation-data.csv")
attach(plot.data)
# Test for normality using Shapiro Wilk test
# If P > 0.05, we cannot reject the NULL hypothesis that the distribution is different than normal
# If P < 0.05, then the distribution is significantly different than normal
for(i in 6:16){
print(names(plot.data[i]))
print(shapiro.test(plot.data[[i]]))
}
# Results: only cropping intensity can be assumed to be normal (P = 0.15).
# normality test by district
df <- filter(plot.data, District == "Nawalpur")
for(i in 6:16){print(names(df[i]))  print(shapiro.test(df[[i]])) }
for(i in 6:16){print(names(df[i]))
print(shapiro.test(df[[i]])) }
message(names(df[i]))
message(names(df[i]), shapiro.test(df[[i]]))
message(names(df[i]), print(shapiro.test(df[[i]])) )
shapiro.test(df$x.area)
names(df)
map(.x = names(dp[6:16]), .f = ~ shapiro.test(df[[.x]]))
map(.x = names(df[6:16]), .f = ~ shapiro.test(df[[.x]]))
map(.x = names(df[6:16]), .f = ~ shapiro.test(df[[.x]]))
?shapiro.test
map(.x = names(df[6:16]), .f = ~ shapiro.test(df[[.x]], data.name = .x))
shapiro.test(df$x.area)
shapiro.test(df$x.area, data.name = "area")
print(shapiro.test(df[[i]]), i)
x.area <- df$x.area
shapiro.test(x.area)
map(.x = names(df[6:16]), .f = ~ shapiro.test(.x))
map(.x = names(df[6:16]), .f = ~ shapiro.test(df[.x]))
map(.x = names(df[6:16]), .f = ~ shapiro.test(df[[.x]]))
sha <- map(.x = names(df[6:16]), .f = ~ shapiro.test(df[[.x]]))
names(sha) <- names(df[6:16])
sha
sha <- map_chr(.x = names(df[6:16]), .f = ~ shapiro.test(df[[.x]]))
shapiro.test(plot.data$x.area)
shapiro.test(plot.data$y.area)
shapiro.tes(df$x.area)
shapiro.test(df$x.area)
df <- list(Nawalpur <- filter(plot.data, District == "Nawalpur"),
Bardiya <- filter(plot.data, District == "Bardiya"))
?apply
df <- list(Nawalpur = filter(plot.data, District == "Nawalpur"),
Bardiya = filter(plot.data, District == "Bardiya"))
apply(df$Bardiya[6:10], MARGIN = 2, shapiro.test)
filter(plot.data, District == "Bardiya") %>% apply(.[6:10], MARGIN = 2, shapiro.test)
filter(plot.data, District == "Bardiya") %>% apply(., MARGIN = 2, shapiro.test)
df <- list(Nawalpur = filter(plot.data, District == "Nawalpur"),
Bardiya = filter(plot.data, District == "Bardiya"),
Mahottari = filter(plot.data, District == "Mahottari"),
All_sites = plot.data)
apply(df$Nawalpur[6:16], MARGIN = 2, shapiro.test)
?shapiro.test
?bartlett.test
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cowplot)
library()
data.tidy <- pivot_longer(plot.data, cols = x.area:y.ci, names_to = "treatment", values_to = "value")
df <- data.tidy %>% filter(., treatment %in% c("x.ci", "y.ci"))
bartlett.test(data = df, value ~ treatment)
data.tidy %>% filter(., treatment %in% c("x.ci", "y.ci")) %>% bartlett.test(value ~ treatment)
data.tidy %>% filter(., treatment %in% c("x.ci", "y.ci")) %>% bartlett.test(value ~ treatment)
data.tidy %>% filter(., treatment %in% c("x.ci", "y.ci")) %>% bartlett.test(value ~ treatment)
data.tidy %>% filter(., treatment %in% c("x.ci", "y.ci")) %>% bartlett.test(data = ., value ~ treatment)
names(plot.data)
head(plot.data)
unique(plot.data$District)
summ.by.site <- data.tidy %>%
group_by(District, Site, treatment) %>%
summarize(
nobs = length(value),
min = min(value),
max = max(value),
average = mean(value),
sd = sd(value),
median = median(value),
var = var(value)
)
summ.by.site
# Combine and save the plots ----
prow <- plot_grid(p.ci + theme(legend.position = "none"),
p.kg + theme(legend.position = "none"),
p.crop + theme(legend.position = "none"),
p.area + theme(legend.position = "none"),
p.inc + theme(legend.position = "none"),
ncol = 2)
# Traditional plots ----
library(ggpubr)
?stat_compare_means
?wilcox.test
bpd <- plot.data[c("District", "x.ci", "y.ci")]
names(bpd) <- c("District", "before", "after")
bp.ci <- ggpaired(bpd, cond1 = "before", cond2 = "after",
#         facet.by = "District",
line.color = "gray",
title = "A. Change in cropping intensity",
xlab = "",
ylab = "Cropping intensity") +
stat_compare_means(method = "wilcox.test" ,
paired = TRUE,
label.y.npc = .9,
aes(label = paste("P =", ..p.format..) ) )
bp.ci
?systemInfo
system.Info
?Sys.info
Sys.info
Sys.info()
